 @model Definitivo.Models.IndexViewModel
@{
    ViewData["Title"] = "Home";

}

<!-- WebGL Canvas Background -->
<canvas id="glCanvas" class="background-canvas"></canvas>

<!-- Main Banner Carousel -->
<div id="bannerCarousel" class="carousel slide" data-bs-ride="carousel">
    <div class="carousel-inner" style="border-radius: 0px 0px 10px 10px;">
        <div class="carousel-item active" style="display: flex; justify-content: center; align-items: center;">
            <img src="~/Images/natalBanner.png" class="d-block" style="height: 290px;width: auto; object-fit: contain;margin: 0 auto;" alt="Banner de Natal">
        </div>
        @foreach (var book in Model.Livros.OrderByDescending(l => l.DataInsercao).Take(3))
        {
            <div class="carousel-item banner-slide">
                <div class="book-content">
                    <div class="book-info">
                        <h1>@(book.Titulo.Length > 55 ? book.Titulo.Substring(0, 55) + "..." : book.Titulo)</h1>
                        <p class="author">by @book.Autor.Nome</p>
                        <a href="/Livros/Book/@book.ID" class="saiba-mais">Saiba Mais</a>
                    </div>
                    <div class="book-image-container">
                        <img src="~/Images/Livros/@book.FotoNome" class="book-image" alt="Foto do @book.Titulo">
                    </div>
                </div>
            </div>
        }

    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#bannerCarousel" data-bs-slide="prev">
        <span class="text-white fs-2" aria-hidden="true"><</span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#bannerCarousel" data-bs-slide="next">
        <span class="text-white fs-2" aria-hidden="true">></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

<!-- Main Content -->
<div class="content-overlay min-vh-100 d-flex flex-column">
    <main class="flex-grow-1 container pb-5">


        <!-- Section 1: Intro -->
        <section class="text-center mt-5  animate__animated animate__zoomIn section-to-animate">
            <h2 class="display-4 mb-4 text-white text-shadow">Explore a Nossa Coleção de Livros</h2>
            <p class="lead text-white mb-6 text-shadow">
                Descubra e-books, revistas e mais na nossa biblioteca online. Acesse uma vasta coleção de materiais
                de pesquisa e leitura, tudo gratuitamente para membros.
            </p>
            <a href="/Livros/Catalogo" onmouseover="preloadPage(this.href)" class="btn btn-primary btn-lg">Aceder ao Catálogo</a>
        </section>

        <section class="mt-5 animate__animated animate__zoomIn section-to-animate">
	        <h3 class="text-white h2 mb-4 text-shadow">Livros Recomendados</h3>
	        <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-4">
		        @foreach (var book in Model.Livros.Take(4))
		        {
			        <div class="col">
				        <a href="@Url.Action("Book", "Livros", new { id = book.ID, veioDoCatalogo = true })"
				           class="card h-100 book-card text-decoration-none">
					        <img src="/Images/Livros/@book.FotoNome"
					             alt="@book.Titulo"
					             class="card-img-top"
					             loading="lazy" />
                            <h5 class="text-center mt-3 mx-1" title="@book.Titulo">@book.Titulo</h5>
					        <p class="text-center mt-2 muted" title="@book.Autor">@book.Autor.Nome</p>
				        </a>
			        </div>
		        }
	        </div>
	        <div class="d-flex align-items-center justify-content-center mt-3">
		        <a class="btn btn-primary" href="/Livros/Catalogo?sortOrder=popularity">Ver Mais</a>
	        </div>
        </section>

        <!-- Section 3: Recent Books -->
        <section class="mt-5 section-to-animate">
            <h3 class="text-white h2 mb-4 text-shadow">Livros Recentes</h3>
            <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-4">
                @foreach (var book in Model.Livros.OrderByDescending(l => l.DataInsercao).Take(4))
                {
                    <div class="col">
                        <a onmouseover="preloadPage(this.href)" href="@Url.Action("Book", "Livros", new { id = book.ID, veioDoCatalogo = true  })"
                           class="card h-100 book-card text-decoration-none">
                            <img src="/Images/Livros/@book.FotoNome"
                                 alt="@book.Titulo"
                                 class="card-img-top"
                                 loading="lazy" />

                            <h5 class="text-center mt-3 mx-1" title="@book.Titulo">@book.Titulo</h5>
                            <p class="text-center mt-2 muted" title="@book.Autor">@book.Autor.Nome</p>

                        </a>
                    </div>
                }
            </div>
            <div class="d-flex align-items-center justify-content-center mt-3">
                <a class="btn btn-primary" href="/Livros/Catalogo?sortOrder=insertionYear_desc">Ver Mais</a>
            </div>
        </section>
    </main>
</div>

<!-- Chatbot Button -->
<div class="position-fixed bottom-0 end-0 m-3" style="z-index: 1050">
    <button id="chatbotButton" class="btn btn-primary rounded-circle shadow-lg d-flex align-items-center justify-content-center"
            style="width: 60px; height: 60px;" onclick="toggleChatbot()">
        <i class="bi bi-chat-dots-fill" style="font-size: 1.7rem;"></i>
    </button>
</div>


<div id="chatbotPanel" class="chatbot-panel bg-white border rounded shadow-lg pb-0"
     style="display: none; position: fixed; bottom: 80px; right: 20px; width: 350px; height: 500px; z-index: 1050;">
    <!-- Cabeçalho -->
    <div class="bg-primary text-white px-3 py-2 d-flex justify-content-between align-items-center rounded-top">
        <h5 class="mb-0">Assistente Virtual</h5>
        <button class="btn btn-sm btn-light text-primary rounded-circle" onclick="toggleChatbot()">
            <i class="bi bi-x"></i>
        </button>
    </div>

    <!-- Corpo -->
    <div class="chatbot-body overflow-auto px-3 py-3" style="height: calc(100% - 117px);">
        <div id="chatMessages">
            <div class="d-flex mb-3">
                <div class="avatar bg-primary text-white rounded-circle d-flex justify-content-center align-items-center me-2"
                     style="width: 40px; height: 40px;">
                    <i class="bi bi-robot" style="font-size: 1.4rem;"></i>
                </div>
                <div class="bg-light rounded-3 p-2">
                    <p class="text-muted small mb-1 text-dark">Apoio ao Cliente</p>
                    <p class="mb-0 text-dark">Olá! Bem-vindo à Bertrund. Como podemos ajudar-te?</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Rodapé -->
    <div class="chatbot-footer px-3 py-3 bg-light-dark rounded">
        <div class="d-flex align-items-center" id="inputDivChatBot">
            <input type="text" id="chatInput" class="form-control border-0 rounded me-2"
                   placeholder="Escreve a tua mensagem..." style="box-shadow: none;">
            <button class="btn btn-primary text-white px-3" onclick="sendMessage()">Enviar</button>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('section-visible');
                    observer.unobserve(entry.target); // Para de observar após a primeira vez
                }
            });
        }, {
            threshold: 0.1 // Quando 10% da secção estiver visível
        });

        // Seleciona todas as secções para aplicar a animação
        const sections = document.querySelectorAll('.section-to-animate');
        sections.forEach(section => {
            section.classList.add('section-hidden'); // Adiciona o estilo inicial
            observer.observe(section);
        });
    });
</script>


<style>
    /* Secção oculta inicialmente */
    .section-hidden {
        opacity: 0;
        transform: translateY(50px);
        transition: opacity 0.8s ease-out, transform 0.8s ease-out;
    }

    /* Quando a secção está visível */
    .section-visible {
        opacity: 1;
        transform: translateY(0);
    }

    .banner-slide {
        background: linear-gradient(135deg, #2b3c8b 0%, #1f2f6f 100%);
        border-radius: 0px 0px 10px 10px;
        height: 290px;
    }

    .book-content {
        position: relative;
        height: 100%;
        display: flex;
        align-items: center;
        padding: 0 5%;
    }

    .book-info {
        width: 65%;
        color: white;
        padding-right: 40px;
        margin-left: 10%;
    }

    .book-info h1 {
        font-size: clamp(2rem, 4vw, 3rem);
        font-weight: bold;
        margin-bottom: 10px;
    }

    .book-info .author {
        font-size: clamp(0.8rem, 1.5vw, 1rem);
        margin-bottom: 20px;
        opacity: 0.9;
    }

    .book-info .description {
        font-size: clamp(0.7rem, 1.2vw, 0.8rem);
        margin-bottom: 30px;
        opacity: 0.8;
    }

    .book-image-container {
        width: 35%;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-right: 10%;
    }

    .book-image {
        max-height: 200px;
        width: auto;
        box-shadow: 0 8px 16px rgba(0,0,0,0.3);
    }

    .saiba-mais {
        display: inline-block;
        padding: 8px 20px;
        background-color: #1a73e8;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s;
        font-size: clamp(0.8rem, 1.2vw, 1rem);
    }

    .saiba-mais:hover {
        background-color: #1557b0;
        color: white;
        text-decoration: none;
    }

    @@media (max-width: 768px) {
        .banner-slide {
            height: 360px;
        }

        .book-content {
            flex-direction: column;
            text-align: center;
            padding: 20px;
        }

        .book-info, .book-image-container {
            width: 100%;
            margin: 10px 0;
            padding: 0;
        }

        .book-image-container {
            justify-content: center;
        }

        .book-image {
            max-height: 150px;
        }
    }

    .bg-light-dark {
        background-color: #e6e6e6; /* Um tom ligeiramente mais escuro que o bg-light */
    }
    .card-title {
        font-size: 1rem;
        margin-bottom: 0.5rem;
        line-height: 1.2;
        height: 2.4rem;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .card-img-top {
        width: 100%;
        height: auto;
        aspect-ratio: 2/3;
        object-fit: cover;
    }

    /* Ajustes responsivos para as imagens */
    @@media (max-width: 576px) {
        .card-img-top {
            max-width: 200px;
            margin: 0 auto;
            display: block;
        }

        .card {
            text-align: center;
        }
    }

    @@media (min-width: 577px) and (max-width: 768px) {
        .card-img-top {
            max-width: 180px;
            margin: 0 auto;
        }
    }

    @@media (min-width: 769px) and (max-width: 1200px) {
        .card-img-top {
            max-width: 220px;
            margin: 0 auto;
        }
    }

    @@media (min-width: 1201px) and (max-width: 1400px) {
        .card-img-top {
            max-width: 250px;
            margin: 5px auto 0 auto; /* Margem superior de 10px */
        }
    }

    @@media (min-width: 1401px) {
        .card-img-top {
            max-width: 250px;
            margin: 18px auto 0 auto; /* Margem superior de 10px */
        }
    }


    .book-card {
        background: var(--bs-card-bg);
        color: var(--bs-body-color);
        backdrop-filter: blur(5px);
        border: 1px solid var(--bs-border-color);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px var(--bs-shadow-color);
    }

    .btn-outline-primary {
        color: var(--bs-primary);
        border-color: var(--bs-primary);
        background-color: transparent;
        transition: all 0.3s ease;
    }

    .btn-outline-primary:hover {
        color: var(--bs-white);
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        transform: translateY(-2px);
    }

    

    .background-canvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        z-index: -1;
        pointer-events: none;
    }

    .content-overlay {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    .text-shadow {
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .chatbot-panel {
    animation: fadeIn 0.3s ease-in-out;
    }

        .chatbot-panel .avatar {
            font-size: 14px;
            font-weight: bold;
        }

    .chatbot-body .bg-light {
        word-wrap: break-word;
        max-width: 80%;
    }

    .chatbot-footer input:focus {
        outline: none;
        box-shadow: none;
    }

    .chatbot-body span {
        word-wrap: break-word; /* Quebra palavras longas */
        word-break: break-word; /* Para navegadores mais antigos */
        white-space: pre-wrap; /* Preserva espaços e permite quebra de linha */
        display: inline-block; /* Garante que o texto se ajuste ao contêiner */
        max-width: 95%; /* Limita a largura da mensagem para caber no painel */
    }

    @@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }



    @@keyframes loadingDots {
        0%, 100% {
            transform: scale(0.3);
            opacity: 0.3;
        }
        50% {
            transform: scale(1);
            opacity: 1;
        }
    }



}
</style>

<!-- Vertex Shader -->
<script id="vertex-shader" type="x-shader/x-vertex">
    attribute vec4 position;
    void main() {
        gl_Position = position;
    }
</script>

<!-- Fragment Shader -->
<script id="fragment-shader" type="x-shader/x-fragment">
    precision mediump float;
    uniform vec2 iResolution;
    uniform float iTime;

    void mainImage(out vec4 fragColor, vec2 fragCoord) {
        float mr = min(iResolution.x, iResolution.y);
        vec2 uv = (fragCoord * 2.0 - iResolution.xy) / mr;

        float d = -iTime * 0.3;  // Velocidade reduzida
        float a = 0.0;
        for (float i = 0.0; i < 8.0; ++i) {
            a += cos(i - d - a * uv.x);
            d += sin(uv.y * i + a);
        }
        d += iTime * 0.3;

        vec3 col = vec3(
            cos(uv.x * d) * 0.3 + 0.7,        // Componente R suave
            cos(uv.y * a) * 0.3 + 0.7,        // Componente G suave
            cos(d + a) * 0.3 + 0.7            // Componente B suave
        );

        col = cos(col * cos(vec3(d, a, 2.0)) * 0.3 + 0.7);
        fragColor = vec4(col, 1);
    }


    void main() {
        vec4 color;
        mainImage(color, gl_FragCoord.xy);
        gl_FragColor = color;
    }
</script>
<script>
    let gl;
    let program;
    let startTime;
    const targetFPS = 30; // Set desired FPS here
    const frameInterval = 1000 / targetFPS; // Calculate the interval in milliseconds

    let lastFrameTime = 0; // Track the time of the last frame

    function initGL() {
        const canvas = document.getElementById('glCanvas');
        gl = canvas.getContext('webgl');

        if (!gl) {
            console.error('WebGL não disponível');
            return;
        }

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            gl.viewport(0, 0, canvas.width, canvas.height);
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        const vertexShader = compileShader(gl.VERTEX_SHADER, document.getElementById('vertex-shader').textContent);
        const fragmentShader = compileShader(gl.FRAGMENT_SHADER, document.getElementById('fragment-shader').textContent);

        program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);

        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.error('Erro ao inicializar shaders');
            return;
        }

        const vertices = new Float32Array([
            -1, -1,
            1, -1,
            -1, 1,
            1, 1
        ]);

        const vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

        const positionLocation = gl.getAttribLocation(program, 'position');
        gl.enableVertexAttribArray(positionLocation);
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

        startTime = Date.now();
        requestAnimationFrame(optimizedRender);
    }

    function compileShader(type, source) {
        const shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.error('Erro ao compilar shader: ' + gl.getShaderInfoLog(shader));
            gl.deleteShader(shader);
            return null;
        }

        return shader;
    }

    function render() {
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.useProgram(program);

        const timeLocation = gl.getUniformLocation(program, 'iTime');
        const resolutionLocation = gl.getUniformLocation(program, 'iResolution');

        gl.uniform1f(timeLocation, (Date.now() - startTime) / 1000);
        gl.uniform2f(resolutionLocation, gl.canvas.width, gl.canvas.height);

        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    }

    // Optimized rendering with frame rate control
    function optimizedRender(now) {
        if (!isPageVisible) return;

        // Calculate time since last frame
        const deltaTime = now - lastFrameTime;

        // Only render if enough time has passed based on the target FPS
        if (deltaTime >= frameInterval) {
            lastFrameTime = now;
            render();
        }

        requestAnimationFrame(optimizedRender);
    }

    // Track page visibility for performance optimization
    let isPageVisible = true;
    document.addEventListener('visibilitychange', () => {
        isPageVisible = !document.hidden;
    });

    window.addEventListener('load', () => {
        initGL();
    });

    // Função para abrir/fechar o chatbot
    function toggleChatbot() {
        const chatbotPanel = document.getElementById("chatbotPanel");
        chatbotPanel.style.display = chatbotPanel.style.display === "block" ? "none" : "block";
    }

    //vai buscar os inputs e button
    const inputField = document.getElementById("inputDivChatBot").querySelector("input");
    const button = document.getElementById("inputDivChatBot").querySelector("button");

    // Flag para evitar sobrescrita
    let isProcessing = false;

    // Listener para o input
    inputField.addEventListener("input", () => {
        if (isProcessing) return; // Se o chatbot estiver processando, ignore alterações no input

        // Verifica se o input tem algum texto
        if (inputField.value.trim() === "") {
            button.disabled = true;
        } else {
            button.disabled = false;
        }
    });

    async function sendMessage() {
        const input = document.getElementById("chatInput");
        const userMessage = input.value.trim();

        if (userMessage !== "") {
            // Indica que está processando
            isProcessing = true;

            // Clear input immediately
            input.value = "";

            //para bloquear o input enquanto o chatbot pensa
            const button = document.getElementById("inputDivChatBot").querySelector("button"); // Seleciona todos os tipos de elementos interativos
            button.disabled = true;

            // Show user message
            appendMessage(userMessage, "user");

            const loadingId = appendLoadingAnimation();

            try {
                const response = await fetch("/api/GeminiAi/generate", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(userMessage)
                });

                const data = await response.json();
                //console.log(data);

                // Remove loading animation
                const loadingElement = document.getElementById(loadingId);
                if (loadingElement) {
                    loadingElement.remove();
                }

                //Desbloqueamos o input depois de o chatbot responder
                const divInputs = document.getElementById("inputDivChatBot");
                const elementos = divInputs.querySelector("button"); // Seleciona todos os tipos de elementos interativos
                elementos.disabled = true;

                //console.log(data.generatedText);

                // Check if response has generatedText property
                if (data && data.generatedText) {
                    appendMessage(data.generatedText, "bot");
                } else {
                    appendMessage("Desculpe, ocorreu um erro ao processar a sua mensagem.", "error");
                }

            } catch (error) {
                console.error("Error:", error);
                const loadingElement = document.getElementById(loadingId);
                if (loadingElement) {
                    loadingElement.remove();
                }
                appendMessage("Erro na ligação com o servidor.", "error");
            
            } finally {
                // Após processar, reativa os controles
                isProcessing = false;
                button.disabled = inputField.value.trim() === "";
            }
        }
    }
    function appendLoadingAnimation() {
        // Inject keyframes for loading dots animation
        const styleSheet = document.createElement('style');
        styleSheet.textContent = `
    @@keyframes loadingDots {
                0%, 100% {
                    transform: translateY(0);
                    opacity: 0.3;
                }
                50% {
                    transform: translateY(-5px);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(styleSheet);

        // Create the loading animation element
        const loadingId = `loading-${Date.now()}`;
        const messages = document.getElementById("chatMessages");
        const loadingElement = document.createElement("div");

        loadingElement.className = "d-flex mb-3";
        loadingElement.id = loadingId;

        loadingElement.innerHTML = `
            <div class="avatar bg-primary text-white rounded-circle d-flex justify-content-center align-items-center me-2"
                 style="width: 40px; height: 40px;">
                 <i class="bi bi-robot" style="font-size: 1.4rem;"></i>
            </div>
            <div class="bg-light rounded-3 p-2" style="max-width: 75%; word-wrap: break-word;">
                <div class="loading-dots d-flex gap-1">
                    <span style="font-size: 16px; color: #666; animation: loadingDots 1s infinite;">●</span>
                    <span style="font-size: 16px; color: #666; animation: loadingDots 1s infinite; animation-delay: 0.2s;">●</span>
                    <span style="font-size: 16px; color: #666; animation: loadingDots 1s infinite; animation-delay: 0.4s;">●</span>
                </div>
            </div>
        `;

        messages.appendChild(loadingElement);
        messages.scrollTop = messages.scrollHeight;

        return loadingId;
    }



    function appendMessage(message, type) {
        const messages = document.getElementById("chatMessages");
        const messageElement = document.createElement("div");
        const sanitizedMessage = message.toString().trim();

        if (type === "user") {
            // Estilo para mensagens do utilizador
            messageElement.className = "d-flex justify-content-end mb-3";
            messageElement.innerHTML = `
                <div class="bg-primary text-white rounded-3 p-2" style="max-width: 75%; word-wrap: break-word;">
                    ${sanitizedMessage}
                </div>
            `;
        } else if (type === "bot") {
            // Estilo para mensagens do bot com avatar e contexto
            messageElement.className = "d-flex mb-3";
            messageElement.innerHTML = `
                <div class="avatar bg-primary text-white rounded-circle d-flex justify-content-center align-items-center me-2"
                     style="width: 40px; height: 40px;">
                    <i class="bi bi-robot" style="font-size: 1.4rem;"></i>
                </div>
                <div class="bg-light rounded-3 p-2" style="max-width: 75%; word-wrap: break-word;">
                    <p class="text-muted small mb-1 text-dark">Apoio ao Cliente</p>
                        <p class="mb-0 text-dark">${sanitizedMessage}</p>
                </div>
            `;
        } else if (type === "error") {
            // Estilo para mensagens de erro
            messageElement.className = "d-flex justify-content-start mb-3";
            messageElement.innerHTML = `
                <div class="bg-danger text-white rounded-3 p-2" style="max-width: 75%; word-wrap: break-word;">
                    ${sanitizedMessage}
                </div>
            `;
        }

        // Adiciona a mensagem ao contêiner e rola para o final
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
    }



    function removeMessage(messageId) {
        const messageElement = document.getElementById(messageId);
        if (messageElement) {
            messageElement.remove();
        }
    }

    // Adiciona o evento de tecla ao campo de input
    document.getElementById("chatInput").addEventListener("keydown", function (event) {
        // Verifica se a tecla pressionada foi "Enter"
        if (event.key === "Enter") {
            event.preventDefault(); // Evita quebra de linha no campo de texto
            sendMessage(); // Chama a função de envio
        }
    });

</script>