// <auto-generated />
using System;
using Definitivo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Definitivo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250108212708_dbCreation")]
    partial class dbCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Definitivo.Models.AprovaBibliotecario", b =>
                {
                    b.Property<string>("ID_PerfilBibliotecario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ID_PerfilAdmin")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID_PerfilBibliotecario", "ID_PerfilAdmin");

                    b.HasIndex("ID_PerfilAdmin");

                    b.ToTable("AprovaBibliotecario");
                });

            modelBuilder.Entity("Definitivo.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateOnly?>("DataFalecimento")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("FotoNome")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nacionalidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Autor");
                });

            modelBuilder.Entity("Definitivo.Models.Biblioteca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("Biblioteca");
                });

            modelBuilder.Entity("Definitivo.Models.BloqueiaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ID_PerfilAdmin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ID_PerfilUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("dataBloqueio")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ID_PerfilAdmin");

                    b.HasIndex("ID_PerfilUser")
                        .IsUnique();

                    b.ToTable("BloqueiaUser");
                });

            modelBuilder.Entity("Definitivo.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Definitivo.Models.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacto");
                });

            modelBuilder.Entity("Definitivo.Models.Emprestimo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataDevolucao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEmprestimo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataPrevista")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id_bibliotecario_entregou")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_bibliotecario_recebeu")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.Property<string>("PerfilId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id_bibliotecario_entregou");

                    b.HasIndex("Id_bibliotecario_recebeu");

                    b.HasIndex("LivroId");

                    b.HasIndex("PerfilId");

                    b.ToTable("Emprestimo");
                });

            modelBuilder.Entity("Definitivo.Models.HoraFuncionamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SobreNosModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SobreNosModelId");

                    b.ToTable("HoraFuncionamento");
                });

            modelBuilder.Entity("Definitivo.Models.Livro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AnoPublicacao")
                        .HasColumnType("int");

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<int>("BibliotecaId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int?>("Cliques")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimensoes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FotoNome")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("IdBibliotecarioInseriu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeroExemplaresDisponiveis")
                        .HasColumnType("int");

                    b.Property<int>("NumeroExemplaresTotal")
                        .HasColumnType("int");

                    b.Property<int>("NumeroPaginas")
                        .HasColumnType("int");

                    b.Property<string>("Sinopse")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("AutorId");

                    b.HasIndex("BibliotecaId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("IdBibliotecarioInseriu");

                    b.ToTable("Livro");
                });

            modelBuilder.Entity("Definitivo.Models.MembroEquipa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SobreNosModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SobreNosModelId");

                    b.ToTable("MembroEquipa");
                });

            modelBuilder.Entity("Definitivo.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Edited")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReplyTo")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Definitivo.Models.Objetivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("bulletPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paragrafoInicial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Objetivo");
                });

            modelBuilder.Entity("Definitivo.Models.Perfil", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoAtivacao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FotoNome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdAdministradorQueCriou")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Morada")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NumeroEmprestimosCanceladosPorEntregar")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Definitivo.Models.PoliticaPrivacidadeModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dataUltimaModificacao")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("PoliticaPrivacidadeModel");
                });

            modelBuilder.Entity("Definitivo.Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Definitivo.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Lido")
                        .HasColumnType("bit");

                    b.Property<int?>("LivroID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TituloLivro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LivroID");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Definitivo.Models.SobreNosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BibliotecaId")
                        .HasColumnType("int");

                    b.Property<string>("Historia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjetivoBibliotecaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BibliotecaId");

                    b.HasIndex("ObjetivoBibliotecaId");

                    b.ToTable("SobreNosModel");
                });

            modelBuilder.Entity("Definitivo.Models.TopicoPoliticaPrivacidade", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("PoliticaPrivacidadeModelid")
                        .HasColumnType("int");

                    b.Property<string>("conteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("PoliticaPrivacidadeModelid");

                    b.ToTable("TopicoPoliticaPrivacidade");
                });

            modelBuilder.Entity("Definitivo.Models.faqElemento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("faqModelid")
                        .HasColumnType("int");

                    b.Property<string>("pergunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resposta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("faqModelid");

                    b.ToTable("faqElemento");
                });

            modelBuilder.Entity("Definitivo.Models.faqModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.HasKey("id");

                    b.ToTable("faqModel");
                });

            modelBuilder.Entity("LivroPerfil", b =>
                {
                    b.Property<int>("ReservaID")
                        .HasColumnType("int");

                    b.Property<string>("ReservadoPorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservaID", "ReservadoPorId");

                    b.HasIndex("ReservadoPorId");

                    b.ToTable("Reservar", (string)null);
                });

            modelBuilder.Entity("LivroPerfil1", b =>
                {
                    b.Property<int>("LivroFavoritosID")
                        .HasColumnType("int");

                    b.Property<string>("PerfisAFavoritarId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LivroFavoritosID", "PerfisAFavoritarId");

                    b.HasIndex("PerfisAFavoritarId");

                    b.ToTable("Favoritar", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Definitivo.Models.AprovaBibliotecario", b =>
                {
                    b.HasOne("Definitivo.Models.Perfil", "PerfilAdmin")
                        .WithMany("BibliotecariosAprovados")
                        .HasForeignKey("ID_PerfilAdmin")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Perfil", "PerfilBibliotecario")
                        .WithMany("AprovadoPor")
                        .HasForeignKey("ID_PerfilBibliotecario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PerfilAdmin");

                    b.Navigation("PerfilBibliotecario");
                });

            modelBuilder.Entity("Definitivo.Models.BloqueiaUser", b =>
                {
                    b.HasOne("Definitivo.Models.Perfil", "PerfilAdmin")
                        .WithMany("Bloqueados")
                        .HasForeignKey("ID_PerfilAdmin")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Perfil", "PerfilUser")
                        .WithOne("Bloqueio")
                        .HasForeignKey("Definitivo.Models.BloqueiaUser", "ID_PerfilUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PerfilAdmin");

                    b.Navigation("PerfilUser");
                });

            modelBuilder.Entity("Definitivo.Models.Emprestimo", b =>
                {
                    b.HasOne("Definitivo.Models.Perfil", "BibliotecarioEntregou")
                        .WithMany()
                        .HasForeignKey("Id_bibliotecario_entregou")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Definitivo.Models.Perfil", "BibliotecarioRecebeu")
                        .WithMany()
                        .HasForeignKey("Id_bibliotecario_recebeu")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Definitivo.Models.Livro", "Livro")
                        .WithMany("Emprestimos")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Perfil", "Perfil")
                        .WithMany("Emprestimos")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BibliotecarioEntregou");

                    b.Navigation("BibliotecarioRecebeu");

                    b.Navigation("Livro");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("Definitivo.Models.HoraFuncionamento", b =>
                {
                    b.HasOne("Definitivo.Models.SobreNosModel", null)
                        .WithMany("HorasFucionamento")
                        .HasForeignKey("SobreNosModelId");
                });

            modelBuilder.Entity("Definitivo.Models.Livro", b =>
                {
                    b.HasOne("Definitivo.Models.Autor", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Biblioteca", "Biblioteca")
                        .WithMany()
                        .HasForeignKey("BibliotecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Perfil", "BibliotecarioInseriu")
                        .WithMany()
                        .HasForeignKey("IdBibliotecarioInseriu")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Biblioteca");

                    b.Navigation("BibliotecarioInseriu");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Definitivo.Models.MembroEquipa", b =>
                {
                    b.HasOne("Definitivo.Models.SobreNosModel", null)
                        .WithMany("MembrosEquipa")
                        .HasForeignKey("SobreNosModelId");
                });

            modelBuilder.Entity("Definitivo.Models.Message", b =>
                {
                    b.HasOne("Definitivo.Models.Perfil", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Perfil", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Definitivo.Models.Reaction", b =>
                {
                    b.HasOne("Definitivo.Models.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Definitivo.Models.Review", b =>
                {
                    b.HasOne("Definitivo.Models.Livro", null)
                        .WithMany("Reviews")
                        .HasForeignKey("LivroID");

                    b.HasOne("Definitivo.Models.Perfil", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Definitivo.Models.SobreNosModel", b =>
                {
                    b.HasOne("Definitivo.Models.Biblioteca", "Biblioteca")
                        .WithMany()
                        .HasForeignKey("BibliotecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Objetivo", "ObjetivoBiblioteca")
                        .WithMany()
                        .HasForeignKey("ObjetivoBibliotecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biblioteca");

                    b.Navigation("ObjetivoBiblioteca");
                });

            modelBuilder.Entity("Definitivo.Models.TopicoPoliticaPrivacidade", b =>
                {
                    b.HasOne("Definitivo.Models.PoliticaPrivacidadeModel", null)
                        .WithMany("topicos")
                        .HasForeignKey("PoliticaPrivacidadeModelid");
                });

            modelBuilder.Entity("Definitivo.Models.faqElemento", b =>
                {
                    b.HasOne("Definitivo.Models.faqModel", null)
                        .WithMany("elementos")
                        .HasForeignKey("faqModelid");
                });

            modelBuilder.Entity("LivroPerfil", b =>
                {
                    b.HasOne("Definitivo.Models.Livro", null)
                        .WithMany()
                        .HasForeignKey("ReservaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Perfil", null)
                        .WithMany()
                        .HasForeignKey("ReservadoPorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivroPerfil1", b =>
                {
                    b.HasOne("Definitivo.Models.Livro", null)
                        .WithMany()
                        .HasForeignKey("LivroFavoritosID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Perfil", null)
                        .WithMany()
                        .HasForeignKey("PerfisAFavoritarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Definitivo.Models.Perfil", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Definitivo.Models.Perfil", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Definitivo.Models.Perfil", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Definitivo.Models.Perfil", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Definitivo.Models.Livro", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Definitivo.Models.Message", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Definitivo.Models.Perfil", b =>
                {
                    b.Navigation("AprovadoPor");

                    b.Navigation("BibliotecariosAprovados");

                    b.Navigation("Bloqueados");

                    b.Navigation("Bloqueio");

                    b.Navigation("Emprestimos");
                });

            modelBuilder.Entity("Definitivo.Models.PoliticaPrivacidadeModel", b =>
                {
                    b.Navigation("topicos");
                });

            modelBuilder.Entity("Definitivo.Models.SobreNosModel", b =>
                {
                    b.Navigation("HorasFucionamento");

                    b.Navigation("MembrosEquipa");
                });

            modelBuilder.Entity("Definitivo.Models.faqModel", b =>
                {
                    b.Navigation("elementos");
                });
#pragma warning restore 612, 618
        }
    }
}
